require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/catalogues", type: :request do
  describe "acessando rotas" do
    context "#index" do
      it "deve retornar status 200" do
        get api_v1_catalogues_path
        expect(response).to have_http_status(200)
      end
    end

    it "verifica a quantidade de catalogos" do
      FactoryBot.create(:catalogue)

      get "/api/v1/catalogues"
      expect(JSON.parse(response.body).size).to eq(1)
    end

    it "verifica rota .json" do
        get "/api/v1/catalogues.json"
        expect(response).to have_http_status(:success)
    end
  end

  describe "GET" do
    context "#show api/v1/catalogues/:id" do
      it "return only catalogue/id" do
        FactoryBot.create(:catalogue)
        get "/api/v1/catalogues/1"

        expect(response).to have_http_status(:success)
      end
    end
  end

  describe "PUT" do
    context "#update api/v1/catalogues/:id" do
      it "atualiza um item no Catalogue" do
        bot = FactoryBot.create(:catalogue)
        bot.genre = "anime"

        expect(bot.genre).to eq('anime')
      end
    end
  end

  describe "DELETE " do
    context "#destroy api/v1/catalogues/:id" do
      it "Deleta um item no Catalogue" do
        FactoryBot.create(:catalogue)
        delete "/api/v1/catalogues/1"

        expect(response).to have_http_status(:no_content)
      end
    end
  end

  describe "Verificando filtros" do
    context "filtro show_id" do
      it "retornar show_id corretamente" do
        bot = FactoryBot.create(:catalogue)

        get "/api/v1/catalogues?show_id=#{bot[:show_id]}"
        expect(JSON.parse(response.body)[0]['id']).to eq(bot[:show_id])
      end
    end

    context "filtro genre" do
      it "retornar genre corretamente" do
        bot = FactoryBot.create(:catalogue)

        get "/api/v1/catalogues?genre=#{bot[:genre]}"
        expect(JSON.parse(response.body)[0]["genre"]).to eq(bot[:genre])
      end
    end

    context "filtro title" do
      it "retornar o title corretamente" do
        bot = FactoryBot.create(:catalogue)

        get "/api/v1/catalogues?title=#{bot[:title]}"
        expect(JSON.parse(response.body)[0]["title"]).to eq(bot[:title])
      end
    end

    context "filtro year" do
      it "retornar o year corretamente" do
        bot = FactoryBot.create(:catalogue)

        get "/api/v1/catalogues?year=#{bot[:release_year]}"
        expect(JSON.parse(response.body)[0]["year"]).to eq(bot[:release_year])
      end
    end
  end
end
